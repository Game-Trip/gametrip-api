// <auto-generated />
using System;
using GameTrip.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameTrip.EFCore.Migrations
{
    [DbContext(typeof(GameTripContext))]
    partial class GameTripContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameLocation", b =>
                {
                    b.Property<Guid>("GamesIdGame")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationsIdLocation")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesIdGame", "LocationsIdLocation");

                    b.HasIndex("LocationsIdLocation");

                    b.ToTable("GameLocation");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("IdComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdComment");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("IdGame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Editor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("RealaseDate")
                        .HasColumnType("bigint");

                    b.HasKey("IdGame");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.GameTripUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GameTripUser");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.LikedGame", b =>
                {
                    b.Property<Guid>("IdLikedGame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("vote")
                        .HasColumnType("int");

                    b.HasKey("IdLikedGame");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("LikedGame");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.LikedLocation", b =>
                {
                    b.Property<Guid>("IdLikedLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("vote")
                        .HasColumnType("int");

                    b.HasKey("IdLikedLocation");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("LikedLocation");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("IdLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Latitude")
                        .HasPrecision(18, 12)
                        .HasColumnType("float(18)");

                    b.Property<double>("Longitude")
                        .HasPrecision(18, 12)
                        .HasColumnType("float(18)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdLocation");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.Picture", b =>
                {
                    b.Property<Guid>("IdPicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdPicture");

                    b.HasIndex("GameId");

                    b.HasIndex("LocationId");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("GameLocation", b =>
                {
                    b.HasOne("GameTrip.Domain.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesIdGame")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameTrip.Domain.Entities.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsIdLocation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.Comment", b =>
                {
                    b.HasOne("GameTrip.Domain.Entities.Location", "Location")
                        .WithMany("Comments")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameTrip.Domain.Entities.GameTripUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.LikedGame", b =>
                {
                    b.HasOne("GameTrip.Domain.Entities.Game", "Game")
                        .WithMany("LikedGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameTrip.Domain.Entities.GameTripUser", "User")
                        .WithMany("LikedGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.LikedLocation", b =>
                {
                    b.HasOne("GameTrip.Domain.Entities.Location", "Location")
                        .WithMany("LikedLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameTrip.Domain.Entities.GameTripUser", "User")
                        .WithMany("LikedLocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.Picture", b =>
                {
                    b.HasOne("GameTrip.Domain.Entities.Game", "Game")
                        .WithMany("Pictures")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameTrip.Domain.Entities.Location", "Location")
                        .WithMany("Pictures")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Game");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.Game", b =>
                {
                    b.Navigation("LikedGames");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.GameTripUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikedGames");

                    b.Navigation("LikedLocations");
                });

            modelBuilder.Entity("GameTrip.Domain.Entities.Location", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikedLocations");

                    b.Navigation("Pictures");
                });
#pragma warning restore 612, 618
        }
    }
}
