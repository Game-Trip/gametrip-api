name: Docker Image CI/CD

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  dockerTag: latest

jobs:

  CICD:
    name: Building and deploy Image gametrip-api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup dockerTag to Staging
        if: github.ref_name == 'develop'
        run: echo "dockerTag=staging" >> $GITHUB_ENV
          
      - name: DockerHub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        working-directory: ./GameTrip/
        run: docker build --file ./GameTrip.API/Dockerfile --tag ${{ secrets.REGISTRY_NAME }}/gametrip-api:${{ env.dockerTag }}  ./
        env:
          ASPNETCORE_ENVIRONMENT: Production

      - name: Push Docker Image to Registry
        run: docker push ${{ secrets.REGISTRY_NAME }}/gametrip-api:${{ env.dockerTag }} 
        
      - name: PUT Request Action to update Stack - STAGING
        if: github.ref_name == 'develop'
        uses: fjogeleit/http-request-action@v1.13.0
        with:
          url: '${{ secrets.PORTAINER_UPDATE_STACK_API_STAGING_URL }}'
          method: 'PUT'
          timeout: 20000
          customHeaders: '${{ secrets.CUSTOM_HEADERS }}'
          data: '${{ vars.PORTAINER_UPDATE_STACK_API_STAGING }}'
          
      - name: PUT Request Action to update Stack - PROD
        if: github.ref_name == 'master'
        uses: fjogeleit/http-request-action@v1.13.0
        with:
          url: '${{ secrets.PORTAINER_UPDATE_STACK_API_PROD_URL }}'
          method: 'PUT'
          timeout: 20000
          customHeaders: '${{ secrets.CUSTOM_HEADERS }}'
          data: '${{ vars.PORTAINER_UPDATE_STACK_API_PROD }}'
